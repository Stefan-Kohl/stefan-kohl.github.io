
#
# Compute all elliptic curve point groups (mod 5)
#

gap> ab5 := Filtered(Tuples([0..4],2),x->(4*x[1]^3+27*x[2]^2) mod 5 <> 0);
[ [ 0, 1 ], [ 0, 2 ], [ 0, 3 ], [ 0, 4 ], [ 1, 0 ], [ 1, 1 ], [ 1, 2 ], 
  [ 1, 3 ], [ 1, 4 ], [ 2, 0 ], [ 2, 1 ], [ 2, 4 ], [ 3, 0 ], [ 3, 2 ], 
  [ 3, 3 ], [ 4, 0 ], [ 4, 1 ], [ 4, 2 ], [ 4, 3 ], [ 4, 4 ] ]
gap> Eab5 := List(ab5,x->EllipticCurveGroup(x[1],x[2],5));
[ EllipticCurveGroup(0,1,5), EllipticCurveGroup(0,2,5), 
  EllipticCurveGroup(0,3,5), EllipticCurveGroup(0,4,5), 
  EllipticCurveGroup(1,0,5), EllipticCurveGroup(1,1,5), 
  EllipticCurveGroup(1,2,5), EllipticCurveGroup(1,3,5), 
  EllipticCurveGroup(1,4,5), EllipticCurveGroup(2,0,5), 
  EllipticCurveGroup(2,1,5), EllipticCurveGroup(2,4,5), 
  EllipticCurveGroup(3,0,5), EllipticCurveGroup(3,2,5), 
  EllipticCurveGroup(3,3,5), EllipticCurveGroup(4,0,5), 
  EllipticCurveGroup(4,1,5), EllipticCurveGroup(4,2,5), 
  EllipticCurveGroup(4,3,5), EllipticCurveGroup(4,4,5) ]
gap> Sizes5 := List(Eab5,Size);
[ 6, 6, 6, 6, 4, 9, 4, 4, 9, 2, 7, 7, 10, 5, 5, 8, 8, 3, 3, 8 ]
gap> Collected(last);
[ [ 2, 1 ], [ 3, 2 ], [ 4, 3 ], [ 5, 2 ], [ 6, 4 ], [ 7, 2 ], [ 8, 3 ], 
  [ 9, 2 ], [ 10, 1 ] ]
gap> Eab5Noncyclics := Filtered(Eab5,G->not IsCyclic(G));
[ EllipticCurveGroup(1,0,5), EllipticCurveGroup(4,0,5) ]
gap> List(Eab5Noncyclics,AbelianInvariants);
[ [ 2, 2 ], [ 2, 4 ] ]


#
# Take an example of an elliptic curve point group (mod 97)
#

gap> G := EllipticCurveGroup(17,19,97);
EllipticCurveGroup(17,19,97)
gap> GeneratorsOfGroup(G); # Not necessary 'minimal' in any sense
[ ( 2, 35 ), ( 3, 0 ), ( 4, 65 ), ( 5, 61 ), ( 7, 44 ), ( 8, 52 ) ]
gap> Size(G);
100
gap> AsList(G);
[ ( 2, 35 ), ( 2, 62 ), ( 3, 0 ), ( 4, 32 ), ( 4, 65 ), ( 5, 36 ), ( 5, 61 ), 
  ( 7, 44 ), ( 7, 53 ), ( 8, 45 ), ( 8, 52 ), ( 10, 5 ), ( 10, 92 ), 
  ( 12, 37 ), ( 12, 60 ), ( 13, 20 ), ( 13, 77 ), ( 14, 24 ), ( 14, 73 ), 
  ( 16, 33 ), ( 16, 64 ), ( 23, 8 ), ( 23, 89 ), ( 24, 34 ), ( 24, 63 ), 
  ( 25, 8 ), ( 25, 89 ), ( 31, 48 ), ( 31, 49 ), ( 35, 18 ), ( 35, 79 ), 
  ( 36, 40 ), ( 36, 57 ), ( 37, 45 ), ( 37, 52 ), ( 38, 21 ), ( 38, 76 ), 
  ( 40, 0 ), ( 41, 31 ), ( 41, 66 ), ( 44, 3 ), ( 44, 94 ), ( 45, 27 ), 
  ( 45, 70 ), ( 46, 19 ), ( 46, 78 ), ( 47, 47 ), ( 47, 50 ), ( 49, 8 ), 
  ( 49, 89 ), ( 51, 29 ), ( 51, 68 ), ( 52, 45 ), ( 52, 52 ), ( 54, 0 ), 
  ( 55, 2 ), ( 55, 95 ), ( 56, 12 ), ( 56, 85 ), ( 60, 27 ), ( 60, 70 ), 
  ( 63, 2 ), ( 63, 95 ), ( 65, 47 ), ( 65, 50 ), ( 66, 16 ), ( 66, 81 ), 
  ( 68, 39 ), ( 68, 58 ), ( 69, 17 ), ( 69, 80 ), ( 70, 21 ), ( 70, 76 ), 
  ( 71, 25 ), ( 71, 72 ), ( 76, 2 ), ( 76, 95 ), ( 79, 34 ), ( 79, 63 ), 
  ( 81, 4 ), ( 81, 93 ), ( 82, 47 ), ( 82, 50 ), ( 83, 23 ), ( 83, 74 ), 
  ( 85, 30 ), ( 85, 67 ), ( 86, 21 ), ( 86, 76 ), ( 89, 27 ), ( 89, 70 ), 
  ( 91, 34 ), ( 91, 63 ), ( 92, 10 ), ( 92, 87 ), ( 93, 9 ), ( 93, 88 ), 
  ( 96, 1 ), ( 96, 96 ), infinity ]
gap> List(last,Order);
[ 50, 50, 2, 25, 25, 25, 25, 25, 25, 50, 50, 50, 50, 50, 50, 10, 10, 50, 50, 
  50, 50, 50, 50, 10, 10, 50, 50, 50, 50, 50, 50, 5, 5, 50, 50, 25, 25, 2, 
  50, 50, 50, 50, 50, 50, 25, 25, 50, 50, 50, 50, 25, 25, 5, 5, 2, 50, 50, 
  25, 25, 50, 50, 50, 50, 25, 25, 50, 50, 50, 50, 10, 10, 50, 50, 50, 50, 25, 
  25, 10, 10, 50, 50, 50, 50, 50, 50, 10, 10, 50, 50, 25, 25, 10, 10, 50, 50, 
  50, 50, 50, 50, 1 ]
gap> g := Random(G);
( 92, 87 )
gap> g^5;
( 69, 80 )

